"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[8852],{65275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"project-4/iot/HiveMQ_MQTT_Implementation_Guide","title":"HiveMQ_MQTT_Implementation_Guide","description":"Last updated by \'19/05/2024\'","source":"@site/docs/project-4/iot/HiveMQ_MQTT_Implementation_Guide.md","sourceDirName":"project-4/iot","slug":"/project-4/iot/HiveMQ_MQTT_Implementation_Guide","permalink":"/redback-documentation/docs/project-4/iot/HiveMQ_MQTT_Implementation_Guide","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/project-4/iot/HiveMQ_MQTT_Implementation_Guide.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Setup Guide Accelerometer Sensor","permalink":"/redback-documentation/docs/project-4/iot/setup-accelerometer"},"next":{"title":"Closed_Loop_FSM_Sensor_Integration","permalink":"/redback-documentation/docs/project-4/iot/Closed_Loop_FSM_Sensor_Integration"}}');var r=t(74848),o=t(28453);const s={sidebar_position:13},a="Implementing HiveMQ and MQTT in Sensor Data Collection",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Understanding MQTT",id:"understanding-mqtt",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Role of HiveMQ",id:"role-of-hivemq",level:2},{value:"Implementing MQTT with Arduino",id:"implementing-mqtt-with-arduino",level:2},{value:"Sensor Setup",id:"sensor-setup",level:3},{value:"Python Script for Monitoring (Subscriber)",id:"python-script-for-monitoring-subscriber",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Last updated by:"})," Sohil Nagpal, ",(0,r.jsx)(n.strong,{children:"Last updated on:"})," '19/05/2024'"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Last updated by:"})," Sohil Nagpal, ",(0,r.jsx)(n.strong,{children:"Last updated on:"})," '19/05/2024'"]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"implementing-hivemq-and-mqtt-in-sensor-data-collection",children:"Implementing HiveMQ and MQTT in Sensor Data Collection"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Author:"})," Sohil Nagpal"]})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"This report explores the integration of HiveMQ and MQTT protocols in our project to facilitate efficient and reliable data communication. Focusing on the MAX30102 sensor setup, we explain how MQTT can be utilized to transmit sensor data, such as heart rate and oxygen saturation, over a network."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-mqtt",children:"Understanding MQTT"}),"\n",(0,r.jsx)(n.p,{children:"MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol designed for low-bandwidth, high-latency or unreliable networks. It is ideal for IoT applications because it ensures data delivery with minimal bandwidth usage."}),"\n",(0,r.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Publisher-Subscriber Model"}),": MQTT uses a pub-sub model where devices publish messages to topics, and clients subscribe to topics to receive messages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Broker"}),": The central point of message distribution, handling the dissemination of all messages between publishers and subscribers. HiveMQ is a robust MQTT broker designed for enterprise-scale deployment."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"role-of-hivemq",children:"Role of HiveMQ"}),"\n",(0,r.jsx)(n.p,{children:"HiveMQ is an MQTT broker that enhances MQTT implementations with its high scalability, easy integration with enterprise systems, and robust security features. It facilitates the management of large-scale IoT applications and supports the seamless transmission of telemetry data."}),"\n",(0,r.jsx)(n.h2,{id:"implementing-mqtt-with-arduino",children:"Implementing MQTT with Arduino"}),"\n",(0,r.jsx)(n.h3,{id:"sensor-setup",children:"Sensor Setup"}),"\n",(0,r.jsx)(n.p,{children:"The sensor setup remains the same as outlined in the previous guide. Here is a brief overview with additional MQTT implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "DFRobot_BloodOxygen_S.h"\r\n#include <PubSubClient.h>  // MQTT client library\r\n\r\n// Define the I2C address and create an instance of the sensor class\r\n#define I2C_ADDRESS 0x57\r\nDFRobot_BloodOxygen_S_I2C MAX30102(&Wire, I2C_ADDRESS);\r\n\r\n// Setup MQTT parameters\r\nconst char* mqtt_server = "broker.hivemq.com";\r\nconst char* topic = "sensor/data";\r\nconst char* clientID = "unique_client_id";\r\n\r\nWiFiClient espClient;\r\nPubSubClient client(espClient);\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  WiFi.begin("SSID", "password");  // Connect to Wi-Fi\r\n  client.setServer(mqtt_server, 1883);  // Connect to MQTT broker\r\n\r\n  while (false == MAX30102.begin()) {\r\n    Serial.println("init fail!");\r\n    delay(1000);\r\n  }\r\n  Serial.println("init success!");\r\n  Serial.println("start measuring...");\r\n  MAX30102.sensorStartCollect();\r\n}\r\n\r\nvoid loop() {\r\n  if (!client.connected()) {\r\n    reconnect();\r\n  }\r\n  client.loop();\r\n\r\n  // Collect data\r\n  MAX30102.getHeartbeatSPO2();\r\n  String payload = "SPO2 is: " + String(MAX30102._sHeartbeatSPO2.SPO2) + "%";\r\n  Serial.println(payload);\r\n  client.publish(topic, payload.c_str());\r\n\r\n  delay(4000);\r\n}\r\n\r\nvoid reconnect() {\r\n  // Reconnect to the MQTT broker\r\n  while (!client.connected()) {\r\n    Serial.print("Attempting MQTT connection...");\r\n    if (client.connect(clientID)) {\r\n      Serial.println("connected");\r\n    } else {\r\n      Serial.print("failed, rc=");\r\n      Serial.print(client.state());\r\n      Serial.println(" try again in 5 seconds");\r\n      delay(5000);\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python-script-for-monitoring-subscriber",children:"Python Script for Monitoring (Subscriber)"}),"\n",(0,r.jsx)(n.p,{children:"The Python script acts as a subscriber, receiving data published to the MQTT topic."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import paho.mqtt.client as mqtt\r\n\r\ndef on_connect(client, userdata, flags, rc):\r\n    print("Connected with result code "+str(rc))\r\n    client.subscribe("sensor/data")\r\n\r\ndef on_message(client, userdata, msg):\r\n    print(msg.topic+" "+str(msg.payload))\r\n\r\nclient = mqtt.Client()\r\nclient.on_connect = on_connect\r\nclient.on_message = on_message\r\n\r\nclient.connect("broker.hivemq.com", 1883, 60)\r\nclient.loop_forever()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"The integration of HiveMQ and MQTT into our sensor data collection project allows for robust, scalable, and efficient data communication. This setup ensures real-time data monitoring across different platforms, enhancing the capabilities of IoT applications in health monitoring."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);