"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[7024],{2471:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"project-1/vr/bike-input-and-movement","title":"bike-input-and-movement","description":"Last updated by \'16/05/2025\'","source":"@site/docs/project-1/vr/bike-input-and-movement.md","sourceDirName":"project-1/vr","slug":"/project-1/vr/bike-input-and-movement","permalink":"/redback-documentation/docs/project-1/vr/bike-input-and-movement","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/project-1/vr/bike-input-and-movement.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"bike-setup","permalink":"/redback-documentation/docs/project-1/vr/bike-setup"},"next":{"title":"IoT","permalink":"/redback-documentation/docs/category/iot"}}');var t=i(74848),s=i(28453);const l={sidebar_position:8},d="Unity Bike Movement System",c={},o=[{value:"<code>PlayerController</code>",id:"playercontroller",level:3},{value:"<code>IBikeMover</code> Interface",id:"ibikemover-interface",level:3},{value:"<code>IPlayerInput</code> Interface",id:"iplayerinput-interface",level:3},{value:"<code>SimpleBikeController</code>",id:"simplebikecontroller",level:3},{value:"<code>RealisticBikeController</code>",id:"realisticbikecontroller",level:3},{value:"<code>AxisInput</code>",id:"axisinput",level:3},{value:"<code>MQTTInput</code>",id:"mqttinput",level:3},{value:"<code>XRInput</code>",id:"xrinput",level:3},{value:"Data Flow Summary",id:"data-flow-summary",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Runtime Loop",id:"runtime-loop",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Last updated by:"})," \u041e\u0440\u0433\u0438\u043b-\u042d\u0440\u0434\u044d\u043d\u044d, ",(0,t.jsx)(n.strong,{children:"Last updated on:"})," '16/05/2025'"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Last updated by:"})," \u041e\u0440\u0433\u0438\u043b-\u042d\u0440\u0434\u044d\u043d\u044d, ",(0,t.jsx)(n.strong,{children:"Last updated on:"})," '16/05/2025'"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unity-bike-movement-system",children:"Unity Bike Movement System"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Script Name"}),(0,t.jsx)(n.th,{children:"Responsibility"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"PlayerController"})}),(0,t.jsx)(n.td,{children:"Entry point that assigns input and movement handlers to the active bike"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"IBikeMover"})}),(0,t.jsx)(n.td,{children:"Interface to abstract bike movement logic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"IPlayerInput"})}),(0,t.jsx)(n.td,{children:"Interface to abstract input source (Axis, XR, MQTT)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SimpleBikeController"})}),(0,t.jsx)(n.td,{children:"Arcade-style simplified bike movement"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RealisticBikeController"})}),(0,t.jsx)(n.td,{children:"Physics-based realistic bike movement and balance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"AxisInput"})}),(0,t.jsx)(n.td,{children:"Uses Unity Input (keyboard/controller)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"MQTTInput"})}),(0,t.jsx)(n.td,{children:"Uses MQTT topics to get steering and speed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"XRInput"})}),(0,t.jsx)(n.td,{children:"Uses XR controller joystick axis for input"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"playercontroller",children:(0,t.jsx)(n.code,{children:"PlayerController"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Selects and initializes the appropriate movement controller (",(0,t.jsx)(n.code,{children:"IBikeMover"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Dynamically chooses the input handler (",(0,t.jsx)(n.code,{children:"IPlayerInput"}),") based on:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MQTT connection"}),"\n",(0,t.jsx)(n.li,{children:"XR controller detection"}),"\n",(0,t.jsx)(n.li,{children:"Fallback to keyboard"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Passes input values to the active ",(0,t.jsx)(n.code,{children:"IBikeMover"})," in ",(0,t.jsx)(n.code,{children:"FixedUpdate()"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Handles score collection through ",(0,t.jsx)(n.code,{children:"OnTriggerEnter"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Exposes ",(0,t.jsx)(n.code,{children:"SetSpeed()"})," and ",(0,t.jsx)(n.code,{children:"GetSpeed()"})," for runtime tuning"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"ibikemover-interface",children:[(0,t.jsx)(n.code,{children:"IBikeMover"})," Interface"]}),"\n",(0,t.jsx)(n.p,{children:"Defines the API for movement components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"float Speed { get; set; }\r\nvoid Init(GameObject controller);\r\nvoid HanldeInput(Vector2 direction);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"iplayerinput-interface",children:[(0,t.jsx)(n.code,{children:"IPlayerInput"})," Interface"]}),"\n",(0,t.jsxs)(n.p,{children:["Defines how directional input is gathered. All implementations return a ",(0,t.jsx)(n.code,{children:"Vector2"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x"}),": Horizontal steering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"y"}),": Forward/backward movement"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"simplebikecontroller",children:(0,t.jsx)(n.code,{children:"SimpleBikeController"})}),"\n",(0,t.jsx)(n.p,{children:"Arcade-style bike movement:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No physics (rigidbody is kinematic)"}),"\n",(0,t.jsx)(n.li,{children:"Manual rotation and translation based on direction"}),"\n",(0,t.jsx)(n.li,{children:"Rotates wheels visually"}),"\n",(0,t.jsx)(n.li,{children:"Aligns bike to terrain normal for realism"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Best for: simple mobile control, joystick or keyboard input."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"realisticbikecontroller",children:(0,t.jsx)(n.code,{children:"RealisticBikeController"})}),"\n",(0,t.jsx)(n.p,{children:"Physics-based bike system:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Controls motor torque, braking, and steering via ",(0,t.jsx)(n.code,{children:"WheelColliders"})]}),"\n",(0,t.jsx)(n.li,{children:"Computes steering angle reduction at higher speeds"}),"\n",(0,t.jsxs)(n.li,{children:["Uses ",(0,t.jsx)(n.code,{children:"AnimationCurve"})," to simulate self-balancing (torque applied against tilt)"]}),"\n",(0,t.jsx)(n.li,{children:"Leaning is computed and visualized"}),"\n",(0,t.jsx)(n.li,{children:"Syncs visual wheel rotation with physics colliders"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Best for: immersive VR, realistic terrain, and learning physics principles."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"axisinput",children:(0,t.jsx)(n.code,{children:"AxisInput"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Uses Unity's built-in ",(0,t.jsx)(n.code,{children:'Input.GetAxis("Horizontal"/"Vertical")'})]}),"\n",(0,t.jsx)(n.li,{children:"Best for development/testing or traditional control schemes"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"mqttinput",children:(0,t.jsx)(n.code,{children:"MQTTInput"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subscribes to MQTT topics for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Speed control"}),"\n",(0,t.jsx)(n.li,{children:"Left/right turns"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Parses JSON-encoded speed data"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Designed for hardware integration or IoT-enabled exercise bikes"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"xrinput",children:(0,t.jsx)(n.code,{children:"XRInput"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Uses ",(0,t.jsx)(n.code,{children:"XR.InputDevices"})," to read joystick direction from hand-held controllers"]}),"\n",(0,t.jsx)(n.li,{children:"Ideal for VR motion controllers"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"data-flow-summary",children:"Data Flow Summary"}),"\n",(0,t.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PlayerController"})," checks input method and selects ",(0,t.jsx)(n.code,{children:"IPlayerInput"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Retrieves or overrides the movement handler (",(0,t.jsx)(n.code,{children:"IBikeMover"}),") based on preferences."]}),"\n",(0,t.jsxs)(n.li,{children:["Calls ",(0,t.jsx)(n.code,{children:"Init()"})," to link the movement handler with the current bike model."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"runtime-loop",children:"Runtime Loop"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"FixedUpdate()"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Gets input via ",(0,t.jsx)(n.code,{children:"IPlayerInput.GetDirection()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Passes input to ",(0,t.jsx)(n.code,{children:"IBikeMover.HanldeInput()"})]}),"\n",(0,t.jsx)(n.li,{children:"Movement logic is executed (e.g., wheel torque, transform rotation)"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var r=i(96540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);