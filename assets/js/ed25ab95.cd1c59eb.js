"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[7268],{7679:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner","title":"Dependency-Scanner","description":"Last updated by \'27/05/2025\'","source":"@site/docs/cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner.md","sourceDirName":"cybersecurity/SecDevOps Team/secure-code","slug":"/cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner","permalink":"/redback-documentation/docs/cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"TLS_Proof_of_Concept_plus_automation","permalink":"/redback-documentation/docs/cybersecurity/SecDevOps Team/secure-code/TLS_Proof_of_Concept_plus_automation"},"next":{"title":"Dependency-Scanner-Report","permalink":"/redback-documentation/docs/cybersecurity/SecDevOps Team/secure-code/Dependency-Scanner-Report"}}');var r=i(74848),t=i(28453);const l={sidebar_position:3},o="Trivy Dependency Scan",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Workflow Trigger",id:"workflow-trigger",level:2},{value:"Jobs",id:"jobs",level:2},{value:"1. Trivy Repo Scan &amp; Upload to Security Tab",id:"1-trivy-repo-scan--upload-to-security-tab",level:3},{value:"Purpose",id:"purpose",level:4},{value:"Steps",id:"steps",level:4},{value:"2. Trivy PR Check",id:"2-trivy-pr-check",level:3},{value:"Purpose",id:"purpose-1",level:4},{value:"Steps",id:"steps-1",level:4},{value:"Configuration Details",id:"configuration-details",level:2},{value:"Trivy Scan",id:"trivy-scan",level:3},{value:"Reviewdog",id:"reviewdog",level:3},{value:"Expected Results",id:"expected-results",level:2},{value:"Trivy Repo Scan Results",id:"trivy-repo-scan-results",level:3},{value:"Trivy PR Check Results",id:"trivy-pr-check-results",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Last updated by:"})," RichardWhellum, ",(0,r.jsx)(n.strong,{children:"Last updated on:"})," '27/05/2025'"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Last updated by:"})," RichardWhellum, ",(0,r.jsx)(n.strong,{children:"Last updated on:"})," '27/05/2025'"]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"trivy-dependency-scan",children:"Trivy Dependency Scan"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Document Creation:"})," 8 January, 2025. ",(0,r.jsx)(n.strong,{children:"Last Edited:"})," 14 May, 2025. ",(0,r.jsx)(n.strong,{children:"Authors:"})," Richard Whellum.\r\n",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.strong,{children:"Document Code:"})," TRV1. ",(0,r.jsx)(n.strong,{children:"Effective Date:"})," 8 January, 2025. ",(0,r.jsx)(n.strong,{children:"Expiry Date:"})," 8 January, 2026."]})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This GitHub Actions workflow automates the scanning of vulnerabilities in dependencies and files within a pull request (PR). The workflow uses Trivy, a vulnerability scanner, to scan both the entire repository and only the changed files in a PR. It then uses Reviewdog to post comments on the PR with the scan results, highlighting any vulnerabilities found."}),"\n",(0,r.jsx)(n.p,{children:"The process consists of two jobs:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Trivy Repo Scan & Upload to Security Tab"}),": Checks the entire repository for vulnerable dependencies, ensuring that any new issues are identified and added to the Security section of the repository settings."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Trivy PR Check"}),": Scans only the files changed in the PR for vulnerabilities, using Reviewdog to post PR comments if high or critical vulnerabilities are detected."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"workflow-trigger",children:"Workflow Trigger"}),"\n",(0,r.jsx)(n.p,{children:"The workflow is triggered on two events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Push to main branch"}),": The workflow will run when changes are pushed to the main branch."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pull Request (PR)"}),": The workflow will run when a pull request is opened or updated."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"jobs",children:"Jobs"}),"\n",(0,r.jsx)(n.h3,{id:"1-trivy-repo-scan--upload-to-security-tab",children:"1. Trivy Repo Scan & Upload to Security Tab"}),"\n",(0,r.jsx)(n.h4,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"This job scans the entire repository for vulnerable dependencies, and uploads the results to the GitHub Security tab. This ensures that the repository's Security section remains up-to-date with newly discovered vulnerabilities, providing maintainers with an ongoing overview of dependency health."}),"\n",(0,r.jsx)(n.h4,{id:"steps",children:"Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Run Trivy Vulnerability Scanner"}),": Trivy scans the entire repository. Unfixed vulnerabilities are ignored in the results."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Upload Trivy Scan Results"}),": The results are uploaded to GitHub\u2019s Security tab, allowing maintainers to view and manage vulnerabilities directly within the repository's settings. Ensure that the repository has GitHub\u2019s Code Scanning features enabled to view results in the Security tab."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-trivy-pr-check",children:"2. Trivy PR Check"}),"\n",(0,r.jsx)(n.h4,{id:"purpose-1",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"This job scans only the files changed in the pull request for vulnerabilities and posts results directly to the PR using Reviewdog comments."}),"\n",(0,r.jsx)(n.h4,{id:"steps-1",children:"Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Get Changed Files"}),": The job fetches the latest changes from the main branch and compares them with the current state of the PR."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Run Trivy on Changed Files"}),": Trivy scans only the changed files for vulnerabilities. The scan targets only HIGH and CRITICAL severity vulnerabilities. Results are saved per affected file for further processing by Reviewdog."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Run Reviewdog"}),': Reviewdog parses the Trivy scan results and posts comments on the PR. If any vulnerabilities are found with "HIGH" or "CRITICAL" severity, they will be reported as errors.']}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-details",children:"Configuration Details"}),"\n",(0,r.jsx)(n.h3,{id:"trivy-scan",children:"Trivy Scan"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The scan uses the ",(0,r.jsx)(n.code,{children:"fs"})," (filesystem) mode to scan files and directories for vulnerabilities in dependencies and other files."]}),"\n",(0,r.jsxs)(n.li,{children:["Only ",(0,r.jsx)(n.strong,{children:"HIGH"})," and ",(0,r.jsx)(n.strong,{children:"CRITICAL"})," severity vulnerabilities are reported."]}),"\n",(0,r.jsxs)(n.li,{children:["Unfixed vulnerabilities are ignored with the ",(0,r.jsx)(n.code,{children:"ignore-unfixed: true"})," option."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reviewdog",children:"Reviewdog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reviewdog posts results directly as PR review comments."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"level: error"})," option ensures that findings with HIGH or CRITICAL severity are marked as errors."]}),"\n",(0,r.jsx)(n.li,{children:"The reviewer can view and address vulnerabilities by checking the comments posted by Reviewdog."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"expected-results",children:"Expected Results"}),"\n",(0,r.jsx)(n.h3,{id:"trivy-repo-scan-results",children:"Trivy Repo Scan Results"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vulnerabilities in dependencies will be detected and uploaded to the GitHub Security tab as a SARIF report."}),"\n",(0,r.jsx)(n.li,{children:"These results will help maintainers continuously monitor the repository\u2019s dependencies and track vulnerabilities in the Security section of the repository settings."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"trivy-pr-check-results",children:"Trivy PR Check Results"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vulnerabilities found in the files changed in the PR will trigger a review comment on the PR. The comment will include information about the severity of each vulnerability."}),"\n",(0,r.jsx)(n.li,{children:"HIGH and CRITICAL vulnerabilities will be marked as errors by Reviewdog. This can be configured to block the PR from being merged if desired, however that functionality has been disabled in this initial implementation."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);