"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[9510],{53572:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"project-4/Pose-estimation/pose_estimation_matching","title":"pose_estimation_matching","description":"Last updated by \'10/12/2024\'","source":"@site/docs/project-4/Pose-estimation/pose_estimation_matching.md","sourceDirName":"project-4/Pose-estimation","slug":"/project-4/Pose-estimation/pose_estimation_matching","permalink":"/redback-documentation/docs/project-4/Pose-estimation/pose_estimation_matching","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/project-4/Pose-estimation/pose_estimation_matching.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Pose estimation Overview","permalink":"/redback-documentation/docs/category/pose-estimation-overview"},"next":{"title":"pose_data_analytics","permalink":"/redback-documentation/docs/project-4/Pose-estimation/pose_data_analytics"}}');var t=s(74848),o=s(28453);const a={sidebar_position:1},d="Pose Estimation and Matching Project",c={},l=[{value:"Summary",id:"summary",level:2},{value:"Libraries Used",id:"libraries-used",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Documentation",id:"documentation",level:2},{value:"Functions",id:"functions",level:3},{value:"<code>classify_pose(points)</code>",id:"classify_posepoints",level:4},{value:"<code>yolo_pose_estimation(image)</code>",id:"yolo_pose_estimationimage",level:4},{value:"<code>pose_estimation(frame, frame_id)</code>",id:"pose_estimationframe-frame_id",level:4},{value:"<code>pose_estimation(frame)</code>",id:"pose_estimationframe",level:4},{value:"<code>euclidean_distance(point1, point2)</code>",id:"euclidean_distancepoint1-point2",level:4},{value:"<code>calculate_similarity_percentage(keypoints1, keypoints2, max_distance=200)</code>",id:"calculate_similarity_percentagekeypoints1-keypoints2-max_distance200",level:4},{value:"<code>resize_to_same_height(img1, img2)</code>",id:"resize_to_same_heightimg1-img2",level:4},{value:"Data Collection",id:"data-collection",level:3},{value:"Real-Time Processing",id:"real-time-processing",level:3},{value:"Pose Matching",id:"pose-matching",level:3},{value:"Usage",id:"usage",level:2},{value:"Conclusion",id:"conclusion",level:2}];function r(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Last updated by:"})," lukgvo, ",(0,t.jsx)(i.strong,{children:"Last updated on:"})," '10/12/2024'"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Last updated by:"})," lukgvo, ",(0,t.jsx)(i.strong,{children:"Last updated on:"})," '10/12/2024'"]}),"\n",(0,t.jsxs)(i.admonition,{type:"info",children:[(0,t.jsx)(i.p,{children:"Document Creation: [5/12/2024]. Last Edited: [10/12/2024]. Authors: [Luk Gvozdenac]."}),(0,t.jsx)(i.p,{children:"Document Code: [PE-1]. Effective Date: [10/12/2024]. Expiry Date: [10/12/2025]."})]}),"\n",(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"pose-estimation-and-matching-project",children:"Pose Estimation and Matching Project"})}),"\n",(0,t.jsx)(i.p,{children:"This project focuses on pose estimation and matching using OpenCV\u2019s DNN (Deep Neural Network) module with a pre-trained TensorFlow model. The primary goal is to detect and classify human poses in images and videos, and to compare the similarity between different poses."}),"\n",(0,t.jsx)(i.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(i.h3,{id:"libraries-used",children:"Libraries Used"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"os"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"cv2"})," (OpenCV)"]}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"matplotlib.pyplot"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"numpy"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"pandas"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"time"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"torch"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"YOLO Model Loading"}),": The YOLO model is loaded using ",(0,t.jsx)(i.code,{children:"torch.hub.load"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pose Estimation Parameters"}),": Parameters such as input width, height, and threshold are defined."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Body Parts and Pose Pairs"}),": Dictionaries and lists defining body parts and their connections."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Image Processing"}),": Images are read, processed, and displayed using OpenCV and Matplotlib."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Data Collection"}),": Data such as frame number, processing time, detected keypoints, and confidence scores are collected and saved to a CSV file."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pose Classification"}),": Functions to classify poses based on detected keypoints."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Video Processing"}),": Real-time pose estimation on video feeds using OpenCV."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pose Matching"}),": Functions to calculate the similarity between poses in two images."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(i.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(i.h4,{id:"classify_posepoints",children:(0,t.jsx)(i.code,{children:"classify_pose(points)"})}),"\n",(0,t.jsx)(i.p,{children:"Classifies the pose based on keypoints."}),"\n",(0,t.jsx)(i.h4,{id:"yolo_pose_estimationimage",children:(0,t.jsx)(i.code,{children:"yolo_pose_estimation(image)"})}),"\n",(0,t.jsx)(i.p,{children:"Performs pose estimation using the YOLO model."}),"\n",(0,t.jsx)(i.h4,{id:"pose_estimationframe-frame_id",children:(0,t.jsx)(i.code,{children:"pose_estimation(frame, frame_id)"})}),"\n",(0,t.jsx)(i.p,{children:"Estimates the pose in a given frame and returns the processed frame and pose label."}),"\n",(0,t.jsx)(i.h4,{id:"pose_estimationframe",children:(0,t.jsx)(i.code,{children:"pose_estimation(frame)"})}),"\n",(0,t.jsx)(i.p,{children:"Estimates the pose in a given frame using OpenCV\u2019s DNN module."}),"\n",(0,t.jsx)(i.h4,{id:"euclidean_distancepoint1-point2",children:(0,t.jsx)(i.code,{children:"euclidean_distance(point1, point2)"})}),"\n",(0,t.jsx)(i.p,{children:"Calculates the Euclidean distance between two points."}),"\n",(0,t.jsx)(i.h4,{id:"calculate_similarity_percentagekeypoints1-keypoints2-max_distance200",children:(0,t.jsx)(i.code,{children:"calculate_similarity_percentage(keypoints1, keypoints2, max_distance=200)"})}),"\n",(0,t.jsx)(i.p,{children:"Calculates the similarity percentage between two sets of keypoints."}),"\n",(0,t.jsx)(i.h4,{id:"resize_to_same_heightimg1-img2",children:(0,t.jsx)(i.code,{children:"resize_to_same_height(img1, img2)"})}),"\n",(0,t.jsx)(i.p,{children:"Resizes two images to have the same height."}),"\n",(0,t.jsx)(i.h3,{id:"data-collection",children:"Data Collection"}),"\n",(0,t.jsx)(i.p,{children:"Data is collected for each frame and saved to a CSV file for further analysis."}),"\n",(0,t.jsx)(i.h3,{id:"real-time-processing",children:"Real-Time Processing"}),"\n",(0,t.jsx)(i.p,{children:"Real-time pose estimation is performed on video feeds, with the results displayed in real-time."}),"\n",(0,t.jsx)(i.h3,{id:"pose-matching",children:"Pose Matching"}),"\n",(0,t.jsx)(i.p,{children:"The similarity between poses in two images is calculated and displayed."}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Image Processing"}),": Load and process images to estimate poses and classify them."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Video Processing"}),": Perform real-time pose estimation on video feeds."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Pose Matching"}),": Compare the similarity between poses in two images."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(i.p,{children:"This project provides a comprehensive solution for pose estimation and matching using deep learning techniques. It can be applied to various domains such as sports analytics, fitness applications, and human-computer interaction."})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>a,x:()=>d});var n=s(96540);const t={},o=n.createContext(t);function a(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);