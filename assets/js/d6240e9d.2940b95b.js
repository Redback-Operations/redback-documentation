"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[6229],{69519:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"project-1/iot/codebase-documentation/Codebase-Overview","title":"Codebase-Overview","description":"Last updated by \'24/09/2024\'","source":"@site/docs/project-1/iot/codebase-documentation/Codebase-Overview.md","sourceDirName":"project-1/iot/codebase-documentation","slug":"/project-1/iot/codebase-documentation/Codebase-Overview","permalink":"/redback-documentation/docs/project-1/iot/codebase-documentation/Codebase-Overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/project-1/iot/codebase-documentation/Codebase-Overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Codebase Documentation","permalink":"/redback-documentation/docs/category/codebase-documentation"},"next":{"title":"Environment-Variables","permalink":"/redback-documentation/docs/project-1/iot/codebase-documentation/Environment-Variables"}}');var i=r(74848),s=r(28453);const o={sidebar_position:1},c="Codebase Overview",d={},a=[{value:"Dependencies",id:"dependencies",level:2},{value:"scripts",id:"scripts",level:2},{value:"ble-auto-connect",id:"ble-auto-connect",level:3},{value:"Drivers",id:"drivers",level:2},{value:"button_control",id:"button_control",level:3},{value:"kickr_climb_and_smart_trainer",id:"kickr_climb_and_smart_trainer",level:3},{value:"fan",id:"fan",level:3},{value:"heart_rate_sensor",id:"heart_rate_sensor",level:3},{value:"Archive",id:"archive",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Last updated by:"})," KasparByrne, ",(0,i.jsx)(n.strong,{children:"Last updated on:"})," '24/09/2024'"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Last updated by:"})," KasparByrne, ",(0,i.jsx)(n.strong,{children:"Last updated on:"})," '24/09/2024'"]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"codebase-overview",children:"Codebase Overview"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u251c\u2500\u2500 Archive\r\n\u251c\u2500\u2500 Drivers\r\n\u2502   \u251c\u2500\u2500 button_control\r\n\u2502   \u2502   \u2514\u2500\u2500 button_control.py\r\n\u2502   \u251c\u2500\u2500 kickr_climb_and_smart_trainer\r\n\u2502   \u2502   \u251c\u2500\u2500 wahoo_device.py\r\n\u2502   \u2502   \u2514\u2500\u2500 incline_and_resistance_control.py\r\n\u2502   \u251c\u2500\u2500 fan\r\n\u2502   \u2502   \u2514\u2500\u2500 fan.py\r\n\u2502   \u2514\u2500\u2500 heart_rate_sensor\r\n\u2502       \u2514\u2500\u2500 heartrate.py\r\n\u2514\u2500\u2500 scripts\r\n    \u251c\u2500\u2500 start_all.sh\r\n    \u251c\u2500\u2500 start_ ... .sh\r\n    \u2514\u2500\u2500 ble-auto-connect\r\n        \u251c\u2500\u2500 ble_auto_connect.sh\r\n        \u2514\u2500\u2500 ble_auto_connect.exp\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Repository: ",(0,i.jsx)(n.a,{href:"https://github.com/Redback-Operations/redback-smartbike-iot",children:"redback-smartbike-iot"})]})}),"\n",(0,i.jsx)(n.p,{children:"The IoT repository is only split across three directories:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Archive"})," contains old and retired code, research, and documentation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Drivers"})," contains currently used driver code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scripts"})," contains bash scripts used to run driver code."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsx)(n.p,{children:"Several dependencies are used by the drivers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"paho-mqtt"})," is used for MQTT functionality"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"gatt"})," library is used for GATT functionality"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Drivers/lib/"})," directory contains our in-house library/common code - including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"constants.py"})," for constants used across drivers such as MQTT example topics, upper and lower bounds for valid value ranges, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mqtt_client.py"})," which contains our standard mqtt client which should be used by all drivers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ble_helper.py"})," which is used by drivers to match UUIDs of characteristics & services and convert values to their OP codes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"gatt/"})," directory which contains the ",(0,i.jsx)(n.code,{children:"gatt_linux.py"})," updated ",(0,i.jsx)(n.code,{children:"gatt"})," library used by some drivers."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Both the in-house and external dependencies help to standardise and streamline code."}),"\n",(0,i.jsx)(n.h2,{id:"scripts",children:"scripts"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"scripts"})," directory holds our ",(0,i.jsx)(n.code,{children:"bash"})," scripts for running driver code."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"start_all.sh"})," script is the primary Smartbike process script which starts all relevant drivers."]}),"\n",(0,i.jsx)(n.h3,{id:"ble-auto-connect",children:"ble-auto-connect"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ble-auto-connect/"})," sub-directory contains the ",(0,i.jsx)(n.code,{children:"ble_auto_connect"})," script: it is made up of a ",(0,i.jsx)(n.code,{children:"bash"})," script and ",(0,i.jsx)(n.code,{children:"expect"})," script. To find out more about the ",(0,i.jsx)(n.code,{children:"ble_auto_connect"})," script see the ",(0,i.jsx)(n.a,{href:"/redback-documentation/docs/project-1/iot/ble-connectivity/BLE-Auto-Connect-Script",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"drivers",children:"Drivers"}),"\n",(0,i.jsx)(n.p,{children:"Drivers drive the functionality of the Smartbike. They connect, control and read values from a specific Smartbike component. Multiple drivers are used to drive the whole Smartbike."}),"\n",(0,i.jsx)(n.h3,{id:"button_control",children:"button_control"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"button_control.py"})," drives the turning button code and any other buttons."]}),"\n",(0,i.jsx)(n.h3,{id:"kickr_climb_and_smart_trainer",children:"kickr_climb_and_smart_trainer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"wahoo_device.py"})," drives the ",(0,i.jsx)(n.strong,{children:"KICKR Climb"}),"'s incline control and ",(0,i.jsx)(n.strong,{children:"KICKR smart trainer"}),"'s resistance control. It also reads the ",(0,i.jsx)(n.code,{children:"speed"}),", ",(0,i.jsx)(n.code,{children:"cadence"})," and ",(0,i.jsx)(n.code,{children:"power"})," values from the KICKR smart trainer."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"incline_and_resistance_control.py"})," is the starter for the ",(0,i.jsx)(n.code,{children:"wahoo_device.py"})," driver. It takes arguments from the starting script and reads loaded environment variable values."]}),"\n",(0,i.jsx)(n.h3,{id:"fan",children:"fan"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fan.py"})," drives the ",(0,i.jsx)(n.strong,{children:"Wahoo Headwind Blueooth Fan"}),", connecting to and controlling the fan's blowing force."]}),"\n",(0,i.jsx)(n.h3,{id:"heart_rate_sensor",children:"heart_rate_sensor"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"heartrate.py"})," drives the ",(0,i.jsx)(n.strong,{children:"TICKR heart rate monitor"}),", connecting to and read & publishing the heart rate data from the TICKR."]}),"\n",(0,i.jsx)(n.h2,{id:"archive",children:"Archive"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Archive"}),' directory holds old and retired code. This includes retired drivers (mostly predefined workout "routines" for the Smartbike), code for remotely connecting to and controlling the Raspberry Pi, a very different and old version of the VR game. It also holds old documentation and research.']})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);