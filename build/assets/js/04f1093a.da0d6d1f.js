"use strict";(self.webpackChunkredback_documentation=self.webpackChunkredback_documentation||[]).push([[9685],{84122:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"project-1/iot/codebase-documentation/GATT","title":"GATT","description":"Last updated by \'23/09/2024\'","source":"@site/docs/project-1/iot/codebase-documentation/GATT.md","sourceDirName":"project-1/iot/codebase-documentation","slug":"/project-1/iot/codebase-documentation/GATT","permalink":"/redback-documentation/docs/project-1/iot/codebase-documentation/GATT","draft":false,"unlisted":false,"editUrl":"https://github.com/Redback-Operations/redback-documentation/blob/main/docs/project-1/iot/codebase-documentation/GATT.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"MQTT-Topics","permalink":"/redback-documentation/docs/project-1/iot/codebase-documentation/MQTT-Topics"},"next":{"title":"Drivers","permalink":"/redback-documentation/docs/category/drivers"}}');var c=r(74848),t=r(28453);const s={sidebar_position:5},a="GATT Code",d={},o=[{value:"Installing <code>gatt</code> library",id:"installing-gatt-library",level:2},{value:"Import Library",id:"import-library",level:2},{value:"DeviceManager",id:"devicemanager",level:2},{value:"Initialisation",id:"initialisation",level:3},{value:"Managing Device",id:"managing-device",level:3},{value:"Run",id:"run",level:3},{value:"Terminate",id:"terminate",level:3},{value:"Device",id:"device",level:2},{value:"Initialisation",id:"initialisation-1",level:3},{value:"Connecting to device",id:"connecting-to-device",level:3},{value:"Discovering Services &amp; Characteristics",id:"discovering-services--characteristics",level:3},{value:"Control Point Callbacks",id:"control-point-callbacks",level:3},{value:"Service",id:"service",level:2},{value:"Characteristic",id:"characteristic",level:2},{value:"Reading Values",id:"reading-values",level:3},{value:"Enabling Notification",id:"enabling-notification",level:3},{value:"Writing Values",id:"writing-values",level:3},{value:"Updated <code>gatt</code> library",id:"updated-gatt-library",level:2},{value:"Descriptor",id:"descriptor",level:3},{value:"Further Information",id:"further-information",level:2}];function l(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(i.p,{children:[(0,c.jsx)(i.strong,{children:"Last updated by:"})," KasparByrne, ",(0,c.jsx)(i.strong,{children:"Last updated on:"})," '23/09/2024'"]}),"\n",(0,c.jsxs)(i.p,{children:[(0,c.jsx)(i.strong,{children:"Last updated by:"})," KasparByrne, ",(0,c.jsx)(i.strong,{children:"Last updated on:"})," '23/09/2024'"]}),"\n",(0,c.jsx)(i.header,{children:(0,c.jsx)(i.h1,{id:"gatt-code",children:"GATT Code"})}),"\n",(0,c.jsx)(i.p,{children:(0,c.jsx)(i.img,{alt:"bike-architecture",src:r(39e3).A+"",width:"335",height:"626"})}),"\n",(0,c.jsxs)(i.p,{children:["The Smartbike relies on BLE's GATT protocol for internal communication (between the Smartbike's components & Raspberry Pi). A ",(0,c.jsx)(i.code,{children:"gatt"})," python library is used to drive this communication between the Raspberry Pi and the Smartbike's components."]}),"\n",(0,c.jsxs)(i.h2,{id:"installing-gatt-library",children:["Installing ",(0,c.jsx)(i.code,{children:"gatt"})," library"]}),"\n",(0,c.jsxs)(i.p,{children:["To install run the following ",(0,c.jsx)(i.code,{children:"pip"})," command:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{children:"pip install gatt\n"})}),"\n",(0,c.jsx)(i.h2,{id:"import-library",children:"Import Library"}),"\n",(0,c.jsxs)(i.p,{children:["The ",(0,c.jsx)(i.code,{children:"gatt"})," library provides two classes which together manage and connect to BLE GATT enabled devices: ",(0,c.jsx)(i.code,{children:"DeviceManager"})," & ",(0,c.jsx)(i.code,{children:"Device"}),"."]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"import gatt\n"})}),"\n",(0,c.jsx)(i.h2,{id:"devicemanager",children:"DeviceManager"}),"\n",(0,c.jsxs)(i.p,{children:["The ",(0,c.jsx)(i.code,{children:"DeviceManager"})," class discovers and manages BLE devices."]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"# create a manager\r\nmanager = gatt.DeviceManager(adapter_name='hci0')\r\n\r\n...\r\n\r\n# create and connect managed device\r\ndevice = gatt.Device('XX:XX:XX:XX:XX:XX', manager)\r\ndevice.connect()\r\n\r\n...\r\n\r\n# run manager\r\nmanager.run()\r\n\r\n...\r\n\r\n# cleanly stop manager\r\nmanager.stop()\n"})}),"\n",(0,c.jsx)(i.h3,{id:"initialisation",children:"Initialisation"}),"\n",(0,c.jsxs)(i.p,{children:["To initialise a ",(0,c.jsx)(i.code,{children:"DeviceManager"})," pass it the BLE adapter address (most likely ",(0,c.jsx)(i.code,{children:"hc10"}),"):"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"manager = gatt.DeviceManager(adapter_name='hci0')\n"})}),"\n",(0,c.jsx)(i.h3,{id:"managing-device",children:"Managing Device"}),"\n",(0,c.jsxs)(i.p,{children:["When creating a ",(0,c.jsx)(i.code,{children:"Device"})," pass a ",(0,c.jsx)(i.code,{children:"DeviceManager"})," to manage it:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"device = gatt.Device('XX:XX:XX:XX:XX:XX', manager)\n"})}),"\n",(0,c.jsx)(i.h3,{id:"run",children:"Run"}),"\n",(0,c.jsxs)(i.p,{children:["To run call ",(0,c.jsx)(i.code,{children:"DeviceManager.run()"}),":"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"manager.run()\n"})}),"\n",(0,c.jsx)(i.h3,{id:"terminate",children:"Terminate"}),"\n",(0,c.jsxs)(i.p,{children:["To cleanly terminate use ",(0,c.jsx)(i.code,{children:"DeviceManager.stop()"}),":"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"manager.stop()\n"})}),"\n",(0,c.jsx)(i.h2,{id:"device",children:"Device"}),"\n",(0,c.jsxs)(i.p,{children:["The ",(0,c.jsx)(i.code,{children:"Device"})," class is responsible for connecting to the device and discovering Services & Characteristics of the device."]}),"\n",(0,c.jsx)(i.h3,{id:"initialisation-1",children:"Initialisation"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"device = gatt.Device(mac_address: str, manager: gatt.DeviceManager, managed: bool=True)\n"})}),"\n",(0,c.jsxs)(i.table,{children:[(0,c.jsx)(i.thead,{children:(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.th,{children:"Parameter"}),(0,c.jsx)(i.th,{children:"Type"}),(0,c.jsx)(i.th,{children:"Description"})]})}),(0,c.jsxs)(i.tbody,{children:[(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"mac_address"})}),(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"str"})}),(0,c.jsx)(i.td,{children:"the mac address of the target device"})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"manager"})}),(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"gatt.DeviceManager"})}),(0,c.jsxs)(i.td,{children:["A ",(0,c.jsx)(i.code,{children:"DeviceManager"})," for managing the ",(0,c.jsx)(i.code,{children:"Device"})]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"managed"})}),(0,c.jsxs)(i.td,{children:[(0,c.jsx)(i.code,{children:"bool"})," [Default ",(0,c.jsx)(i.code,{children:"True"}),"]"]}),(0,c.jsxs)(i.td,{children:["In theory you could manage the device explicitly in which case you would set ",(0,c.jsx)(i.code,{children:"managed"})," to ",(0,c.jsx)(i.code,{children:"False"})," - but there is no reason to do this."]})]})]})]}),"\n",(0,c.jsx)(i.h3,{id:"connecting-to-device",children:"Connecting to device"}),"\n",(0,c.jsxs)(i.p,{children:["To connect using ",(0,c.jsx)(i.code,{children:"Device.connect()"}),":"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"device.connect()\n"})}),"\n",(0,c.jsxs)(i.p,{children:["The callback methods ",(0,c.jsx)(i.code,{children:"connect_succeeded"})," and ",(0,c.jsx)(i.code,{children:"connect_failed"})," can be overriden to log or handle any errors during connection."]}),"\n",(0,c.jsx)(i.h3,{id:"discovering-services--characteristics",children:"Discovering Services & Characteristics"}),"\n",(0,c.jsxs)(i.p,{children:["Upon successfully connecting to the device the ",(0,c.jsx)(i.code,{children:"services_resolved"})," method is called. This method automatically discovers and appends all services of the device to the ",(0,c.jsx)(i.code,{children:"Device.services"})," property and should be extended to discover any services or characteristics of interest like so:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"class AnyDevice(gatt.Device):\r\n\r\n    ...\r\n\r\n    def set_service_or_characteristic(self, service_or_characteristic):\r\n\r\n        # match using UUID\r\n        if service_or_characteristic.uuid == 'XXXXXXXX-XXXX-...':\r\n            self.service_or_characteristic_of_interest = service_or_characteristic\r\n\r\n    def service_resolve(self):\r\n        super().services_resolved()\r\n\r\n        for service in self.services:\r\n            self.set_service_or_characteristic(service)\r\n            for characteristic in service:\r\n                self.set_service_or_characteristic(characteristic)\r\n        \r\n        ...\r\n\r\n        # any other operations needed\n"})}),"\n",(0,c.jsx)(i.h3,{id:"control-point-callbacks",children:"Control Point Callbacks"}),"\n",(0,c.jsx)(i.p,{children:"After an operation is sent to a control point (read/writing a value, enabling notification, requesting control, etc) the control point will return a response. A set of callback methods should be overriden to perform any necessary operation's response:"}),"\n",(0,c.jsxs)(i.table,{children:[(0,c.jsx)(i.thead,{children:(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.th,{children:"Callback Method"}),(0,c.jsx)(i.th,{children:"Parameters"}),(0,c.jsx)(i.th,{children:"Response Type"})]})}),(0,c.jsxs)(i.tbody,{children:[(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic_write_value_succeeded"})}),(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic"})}),(0,c.jsxs)(i.td,{children:["The ",(0,c.jsx)(i.code,{children:"characteristic"})," write operation succeeded and the value has been updated"]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic_write_value_failed"})}),(0,c.jsxs)(i.td,{children:[(0,c.jsx)(i.code,{children:"characteristic"}),", ",(0,c.jsx)(i.code,{children:"error"})]}),(0,c.jsxs)(i.td,{children:["The ",(0,c.jsx)(i.code,{children:"characteristic"})," write operation failed with the following ",(0,c.jsx)(i.code,{children:"error"})]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic_enable_notification_succeeded"})}),(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic"})}),(0,c.jsxs)(i.td,{children:["Notification on the ",(0,c.jsx)(i.code,{children:"characteristic"})," has been enabled"]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic_enable_notification_failed"})}),(0,c.jsxs)(i.td,{children:[(0,c.jsx)(i.code,{children:"characteristic"}),", ",(0,c.jsx)(i.code,{children:"error"})]}),(0,c.jsxs)(i.td,{children:["Notification has not been enabled on the requested ",(0,c.jsx)(i.code,{children:"characteristic"})," with the following ",(0,c.jsx)(i.code,{children:"error"})]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristic_value_updated"})}),(0,c.jsxs)(i.td,{children:[(0,c.jsx)(i.code,{children:"characteristic"}),", ",(0,c.jsx)(i.code,{children:"value"})]}),(0,c.jsxs)(i.td,{children:["A notification enabled ",(0,c.jsx)(i.code,{children:"characteristic"})," has updated with the following ",(0,c.jsx)(i.code,{children:"value"})]})]})]})]}),"\n",(0,c.jsx)(i.p,{children:"These methods should be overriden to log, trigger methods for updated values, and handle errors."}),"\n",(0,c.jsx)(i.h2,{id:"service",children:"Service"}),"\n",(0,c.jsxs)(i.p,{children:["The ",(0,c.jsx)(i.code,{children:"Service"})," class handles GATT services of devices. It has the following properties:"]}),"\n",(0,c.jsxs)(i.table,{children:[(0,c.jsx)(i.thead,{children:(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.th,{children:"Property"}),(0,c.jsx)(i.th,{children:"Description"})]})}),(0,c.jsxs)(i.tbody,{children:[(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"uuid"})}),(0,c.jsxs)(i.td,{children:["The unique ",(0,c.jsx)(i.code,{children:"uuid"})," of the service for identifying it"]})]}),(0,c.jsxs)(i.tr,{children:[(0,c.jsx)(i.td,{children:(0,c.jsx)(i.code,{children:"characteristics"})}),(0,c.jsxs)(i.td,{children:["A list of the ",(0,c.jsx)(i.code,{children:"Service"}),"'s ",(0,c.jsx)(i.code,{children:"Characteristics"}),"."]})]})]})]}),"\n",(0,c.jsx)(i.h2,{id:"characteristic",children:"Characteristic"}),"\n",(0,c.jsxs)(i.p,{children:["The ",(0,c.jsx)(i.code,{children:"Characteristic"})," class handles GATT characteristics of services/devices. It has a unique ",(0,c.jsx)(i.code,{children:"uuid"})," for identification stored in its ",(0,c.jsx)(i.code,{children:"uuid"})," property."]}),"\n",(0,c.jsx)(i.h3,{id:"reading-values",children:"Reading Values"}),"\n",(0,c.jsxs)(i.p,{children:["To read the value of a ",(0,c.jsx)(i.code,{children:"Characteristic"})," use the ",(0,c.jsx)(i.code,{children:"Characteristic.read_value()"})," method:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"value = characteristic_of_interest.read_value()\n"})}),"\n",(0,c.jsxs)(i.p,{children:["Values are returned as an array of bytes. Depending on the expected use of the value it may be converted into a ",(0,c.jsx)(i.code,{children:"str"})," or ",(0,c.jsx)(i.code,{children:"int"}),", the bytes may also be a set of flags and values which require bit operations to extract the values from."]}),"\n",(0,c.jsx)(i.h3,{id:"enabling-notification",children:"Enabling Notification"}),"\n",(0,c.jsxs)(i.p,{children:["Better than explicitly reading a characteristic's value is being notified and given a value when the characteristic updates. Use the ",(0,c.jsx)(i.code,{children:"Characteristic.enable_notifications()"})," method to enable notification. When the value is updated the ",(0,c.jsx)(i.code,{children:"Device"})," callback method ",(0,c.jsx)(i.code,{children:"characteristic_value_updated"})," is called."]}),"\n",(0,c.jsx)(i.h3,{id:"writing-values",children:"Writing Values"}),"\n",(0,c.jsxs)(i.p,{children:["Values written to a characteristic must be in a ",(0,c.jsx)(i.code,{children:"bytearray"})," data type. To write a new value use the ",(0,c.jsx)(i.code,{children:"Characteristic.write_value()"}),":"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"# Convert the value to write into a bytes array\r\nvalue_to_write = bytearray('Hello World!')\r\n\r\n# write the value to the characteristic\r\ncharacteristic_of_interest.write_value(value_to_write)\n"})}),"\n",(0,c.jsxs)(i.h2,{id:"updated-gatt-library",children:["Updated ",(0,c.jsx)(i.code,{children:"gatt"})," library"]}),"\n",(0,c.jsxs)(i.p,{children:["The version of the ",(0,c.jsx)(i.code,{children:"gatt"})," library available through ",(0,c.jsx)(i.code,{children:"pip"})," is outdated compared to the one available on the GitHub repo. As such a local updated version of the library has been created in the ",(0,c.jsx)(i.code,{children:"Drivers/lib/"})," folder under the ",(0,c.jsx)(i.code,{children:"gatt/"})," folder. To load this version use:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"import lib.gatt.gatt_linux as gatt\n"})}),"\n",(0,c.jsx)(i.h3,{id:"descriptor",children:"Descriptor"}),"\n",(0,c.jsxs)(i.p,{children:["This version contains the ",(0,c.jsx)(i.code,{children:"Descriptor"})," class. Descriptors can hold useful meta data describing the expect values and use of a characteristic. In this version of the library, each ",(0,c.jsx)(i.code,{children:"Characteristic"})," has a ",(0,c.jsx)(i.code,{children:"Descriptors"})," array property:"]}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-Python",children:"description = characteristic_of_interest.descriptors\r\n\r\n# convert to string\r\nprint(str(description))\n"})}),"\n",(0,c.jsx)(i.p,{children:(0,c.jsxs)(i.em,{children:["Limited use of the ",(0,c.jsx)(i.code,{children:"Descriptor"})," class and ",(0,c.jsx)(i.code,{children:"descriptors"})," property has occurred - Wahoo devices appear to lack any meta data in their descriptors."]})}),"\n",(0,c.jsx)(i.h2,{id:"further-information",children:"Further Information"}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsxs)(i.li,{children:["For more information on ",(0,c.jsx)(i.a,{href:"/redback-documentation/docs/project-1/iot/technical-background-information/GATT",children:"GATT protocol"})]}),"\n",(0,c.jsxs)(i.li,{children:["For the ",(0,c.jsx)(i.code,{children:"gatt"})," library's ",(0,c.jsx)(i.a,{href:"https://github.com/getsenic/gatt-python/blob/master/gatt/gatt_linux.py",children:"source code"})]}),"\n",(0,c.jsxs)(i.li,{children:["For the ",(0,c.jsx)(i.code,{children:"gatt"})," library's ",(0,c.jsx)(i.a,{href:"https://github.com/getsenic/gatt-python/blob/master/README.md",children:"documentation"})]}),"\n",(0,c.jsxs)(i.li,{children:["For the updated ",(0,c.jsx)(i.code,{children:"gatt"})," library ",(0,c.jsx)(i.a,{href:"https://github.com/Redback-Operations/redback-smartbike-iot/tree/main/Drivers/lib/gatt/gatt_linux.py",children:"Drivers/lib/gatt/gatt_linux.py"})]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,c.jsx)(i,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},39e3:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/bike-architecture-ffc42871fa4f0068d2ce823d52d33c4d.png"},28453:(e,i,r)=>{r.d(i,{R:()=>s,x:()=>a});var n=r(96540);const c={},t=n.createContext(c);function s(e){const i=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);